{"version":3,"file":"useNetworkPlugin.js","sourceRoot":"","sources":["../../src/useNetworkPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { useDevToolsPluginClient, type EventSubscription } from \"expo/devtools\";\nimport { useEffect, useState } from \"react\";\n\nimport { FaultInjectionSettings, MessageString } from \"../common/types\";\n\nexport function useNetworkPlugin() {\n  // TODO: bp - Make useDevToolsPluginClient take a generic type that can be used to get strong type-safety for all its methods\n  const client = useDevToolsPluginClient(\"network-plugin\");\n\n  // There are three states for each of these values:\n  // - undefined: the value has not been set (the user has not interacted with the plugin)\n  // - null: the value has been reset (the user has interacted with the plugin but reset the value)\n  // - string or number: the value has been set (the user has interacted with the plugin and set the value)\n  const [interceptUrl, setInterceptUrl] = useState<string | null>();\n  const [statusCode, setStatusCode] = useState<number | null>();\n  const [responseBody, setResponseBody] = useState<string | null>();\n  const [responseHeaders, setResponseHeaders] = useState<string | null>();\n  const [responseDelay, setResponseDelay] = useState<number | null>();\n\n  const setSettings = (settings: FaultInjectionSettings) => {\n    if (settings.interceptUrl) {\n      setInterceptUrl(settings.interceptUrl);\n    }\n    if (settings.statusCode) {\n      setStatusCode(settings.statusCode);\n    }\n    if (settings.responseBody) {\n      setResponseBody(settings.responseBody);\n    }\n    if (settings.responseHeaders) {\n      setResponseHeaders(settings.responseHeaders);\n    }\n    if (settings.responseDelay) {\n      setResponseDelay(settings.responseDelay);\n    }\n    client?.sendMessage(MessageString.SET_SETTINGS, {\n      settings: JSON.stringify(settings),\n      from: \"app\",\n    });\n  };\n\n  useEffect(() => {\n    const subscriptions: EventSubscription[] = [];\n\n    subscriptions.push(\n      client?.addMessageListener?.(MessageString.SET_ENDPOINT, (data) => {\n        setInterceptUrl(data.endpoint);\n      }),\n      client?.addMessageListener?.(MessageString.RESET_ENDPOINT, () => {\n        setInterceptUrl(null);\n      }),\n      client?.addMessageListener?.(MessageString.SET_STATUS_CODE, (data) => {\n        setStatusCode(parseInt(data.statusCode, 10));\n      }),\n      client?.addMessageListener?.(MessageString.RESET_STATUS_CODE, () => {\n        setStatusCode(null);\n      }),\n      client?.addMessageListener?.(MessageString.SET_BODY, (data) => {\n        setResponseBody(data.body);\n      }),\n      client?.addMessageListener?.(MessageString.RESET_BODY, () => {\n        setResponseBody(null);\n      }),\n      client?.addMessageListener?.(MessageString.SET_HEADERS, (data) => {\n        setResponseHeaders(data.headers);\n      }),\n      client?.addMessageListener?.(MessageString.RESET_HEADERS, () => {\n        setResponseHeaders(null);\n      }),\n      client?.addMessageListener?.(MessageString.SET_DELAY, (data) => {\n        setResponseDelay(parseInt(data.delay, 10));\n      }),\n      client?.addMessageListener?.(MessageString.RESET_DELAY, () => {\n        setResponseDelay(null);\n      }),\n    );\n\n    return () => {\n      for (const subscription of subscriptions) {\n        subscription?.remove();\n      }\n    };\n  }, [client]);\n\n  // @ts-ignore\n  if (process.env.NODE_ENV === \"production\") {\n    return;\n  }\n\n  return {\n    interceptUrl,\n    statusCode,\n    responseBody,\n    responseHeaders,\n    responseDelay,\n    setSettings,\n  };\n}\n"]}